{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from './types';\nimport setAuthToken from \"../utils/setAuthToken\";\nconst PORT = process.env.PORT || 5005; // Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.getItem('token')) {\n    setAuthToken(localStorage.getItem('token'));\n  }\n\n  try {\n    const res = await axios.get(`http://localhost:${PORT}/api/auth`);\n    console.log(res.data);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register user\n\nexport const register = _ref => {\n  let {\n    name,\n    email,\n    password\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      name,\n      email,\n      password\n    });\n\n    try {\n      const res = await axios.post(`http://localhost:${PORT}/api/users`, body, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUser());\n      dispatch(setAlert('Successfully registered', 'success'));\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        console.log(errors);\n        errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n      }\n\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n}; // Login user\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(`http://localhost:${PORT}/api/auth`, body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; //Logout/clear profile\n\nexport const logout = () => async dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/Anmol/Desktop/Project_01/DevConnector/client/src/actions/auth.js"],"names":["axios","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","setAuthToken","PORT","process","env","loadUser","dispatch","localStorage","getItem","res","get","console","log","data","type","payload","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { setAlert } from './alert';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT\n} from './types';\nimport setAuthToken from \"../utils/setAuthToken\";\n\nconst PORT = process.env.PORT || 5005;\n// Load User\nexport const loadUser = () => async (dispatch) => {\n  if (localStorage.getItem('token')) {\n    setAuthToken(localStorage.getItem('token'));\n  }\n\n  try {\n    const res = await axios.get(`http://localhost:${PORT}/api/auth`);\n    console.log(res.data);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\n// Register user\nexport const register =\n  ({ name, email, password }) =>\n  async (dispatch) => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    const body = JSON.stringify({ name, email, password });\n\n    try {\n      const res = await axios.post(\n        `http://localhost:${PORT}/api/users`,\n        body,\n        config\n      );\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data,\n      });\n      dispatch(loadUser());\n      dispatch(setAlert('Successfully registered', 'success'));\n    } catch (err) {\n      const errors = err.response.data.errors;\n      if (errors) {\n        console.log(errors);\n        errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n      }\n\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n    }\n  };\n\n\n// Login user\nexport const login = (email, password) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n  const body = JSON.stringify({ email, password });\n\n  try {\n    const res = await axios.post(\n      `http://localhost:${PORT}/api/auth`,\n      body,\n      config\n    );\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data,\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n\n//Logout/clear profile\nexport const logout = () => async dispatch => {\n  dispatch({type: LOGOUT})\n}"]},"metadata":{},"sourceType":"module"}